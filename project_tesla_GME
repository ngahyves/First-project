!pip install yfinance
!pip install bs4
!pip install nbformat

##import the libraries

import urllib.request, urllib.parse, urllib.error
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import yfinance as yf
import requests
from bs4 import BeautifulSoup

#Question 1
import warnings
## Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

tesla = yf.Ticker("TSLA")
tesla_companyinfo= tesla.info
print("Tesla Company info:\n")
tesla_data = tesla.history(period="max")
data= tesla_data.reset_index(inplace=True)
overview=tesla_data.head()
print(overview)

#Question 2/#using webscraping(read_html function of pandas) to extract tesla revenue data, alternatively use beautiful soup(see webscraping stock data(soup))
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html."
html_data = requests.get(url).text

soup = BeautifulSoup(html_data,"html.parser")
tesla_tables = soup.find_all('table')

for index,table in enumerate(tesla_tables):
    if ("Tesla Quarterly Revenue" in str(table)):
        tesla_table_index = index

tesla_revenue = pd.DataFrame(columns = ["Date", "Revenue"])

data = []
for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text  # Keep the special characters for now
    # Append each row as a tuple to the list
    data.append((date, revenue))
tesla_revenue = pd.DataFrame(data, columns=['Date', 'Revenue'])
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace('[,\\$]', "", regex=True)

print(tesla_revenue.tail())

# ## Question 3: Use yfinance to Extract Stock Data


GME = yf.Ticker("GME")


# Using the ticker object and the function `history` extract stock information and save it in a dataframe named `gme_data`. Set the `period` parameter to `max` so we get information for the maximum amount of time.

gme_data = GME.history(period="max")


# **Reset the index** using the `reset_index(inplace=True)` function on the gme_data DataFrame and display the first five rows of the `gme_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.

gme_data.reset_index(inplace=True)
gme_data.head()

#Question 4: Use yfinance to Extract Stock Data
# 
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
# Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is `GME`.


GME = yf.Ticker("GME")
gme_data = GME.history(period="max")


# **Reset the index** using the `reset_index(inplace=True)` function on the gme_data DataFrame and display the first five rows of the `gme_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.
stuff = pd.read_html(url)
html_data = requests.get(url).text
soup = BeautifulSoup(html_data,"html.parser")
data = []
for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text  # Keep the special characters for now
    # Append each row as a tuple to the list
    data.append((date, revenue))

gme_revenue = pd.DataFrame(data, columns=['Date', 'Revenue'])
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace('[,\\$]', "", regex=True)
print(gme_revenue.tail())


# ## Question 5: Plot Tesla Stock Graph
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()


make_graph(tesla_data, tesla_revenue, 'Tesla')  


# ## Question 6: Plot GameStop Stock Graph
make_graph(gme_data, gme_revenue, 'GME')  


